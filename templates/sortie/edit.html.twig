    {% extends 'base.html.twig' %}



    {% block title %}{{ parent() }} :: Edition{% endblock %}

    {% block body %}
        <div class="registration-container">
            {% if sortie.id is not defined %}
                <h1>Créer une sortie</h1>
            {% else %}
                <h1>Modifier la sortie</h1>
            {% endif %}

            <div class="card registration-card bg-glass champsProfil  ">
                {{ form_start(form) }}

                <div class=" form-groupSortie" id="form-other-fields">
                    {{ form_row(form.nom, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                    {{ form_row(form.adresse, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                    {{ form_row(form.latitude, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                    {{ form_row(form.longitude, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                    {{ form_row(form.nomLieu, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                    {{ form_row(form.rue, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                    {{ form_row(form.nomVille, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                    {{ form_row(form.codePostal, {'attr': {'class': 'form-inputSortie neon-input'}}) }}

                    {{ form_row(form.dateHeureDebut, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                    {{ form_row(form.duree, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                    {{ form_row(form.dateLimiteInscription, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                    {{ form_row(form.nbInscriptionsMax, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                    {{ form_row(form.infosSortie, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                    {{ form_row(form.urlPhoto, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                    {{ form_row(form.site, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                </div>

                <div class="form-groupSortie">
                    {{ form_row(form.inscriptionOption, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                </div>

                <!-- Champ de date début d'inscription, masqué par défaut -->
                <div id="dateDebutInscriptionField" style="display: none;">
                    {{ form_row(form.dateDebutInscription, {'attr': {'class': 'form-inputSortie neon-input'}}) }}
                </div>

                <div class="form-groupSortie r">
                    {{ form_row(form.submit, {'attr': {'class': 'neon-button'}}) }}
                </div>

                {{ form_end(form) }}
            </div>

            {% if sortie.id is defined %}
                <a class="cancel-link" href="{{ path('sortie_list') }}" title="Retour à la liste des sorties">Annuler</a>
                <div>
                <button type="button" class="cancel-link" onclick="window.location.href='{{ path('sortie_list') }}'">Annuler</button>
                </div>
            {% endif %}
        </div>

    {% endblock %}
    {% block javascripts %}
        {{ parent() }}
        <script src="https://maps.googleapis.com/maps/api/js?key={{ google_maps_api_key }}&libraries=places&callback=initAutocomplete" async defer></script>

        <script>
            function initAutocomplete() {
                const input = document.getElementById('sortie_adresse');
                const options = {
                    types: ['establishment'],
                    componentRestrictions: { country: 'fr' }
                };

                const autocomplete = new google.maps.places.Autocomplete(input, options);
                autocomplete.setFields(['address_components', 'geometry']);

                autocomplete.addListener('place_changed', function() {
                    const place = autocomplete.getPlace();

                    if (place.geometry) {

                        document.getElementById('sortie_latitude').value = place.geometry.location.lat();
                        document.getElementById('sortie_longitude').value = place.geometry.location.lng();
                    }


                    if (place.name) {
                        document.getElementById('sortie_nomLieu').value = place.name;
                    }

                    // Remplir la rue
                    let streetAddress = '';
                    for (let i = 0; i < place.address_components.length; i++) {
                        const component = place.address_components[i];
                        if (component.types.includes('route')) {
                            streetAddress = component.long_name;
                        }
                    }
                    document.getElementById('sortie_rue').value = streetAddress;

                    // Remplir le code postal
                    let postalCode = '';
                    for (let i = 0; i < place.address_components.length; i++) {
                        const component = place.address_components[i];
                        if (component.types.includes('postal_code')) {
                            postalCode = component.long_name;
                        }
                    }
                    document.getElementById('sortie_codePostal').value = postalCode;

                    // Remplir le nom de la ville
                    let cityName = '';
                    for (let i = 0; i < place.address_components.length; i++) {
                        const component = place.address_components[i];
                        if (component.types.includes('locality')) {  // Le type 'locality' correspond à la ville
                            cityName = component.long_name;
                        }
                    }
                    document.getElementById('sortie_nomVille').value = cityName;
                });
            }


            document.addEventListener('DOMContentLoaded', function() {
                const dateFieldWrapper = document.getElementById('dateDebutInscriptionField'); // Le wrapper du champ de date
                const dateField = document.getElementById('sortie_dateDebutInscription'); // Le champ de date

                function toggleDateField() {
                    const inscriptionOption = document.querySelector('input[name="sortie[inscriptionOption]"]:checked').value;

                    // Si "Maintenant", masquage du champ de date
                    if (inscriptionOption === 'now') {
                        dateFieldWrapper.style.display = 'none';
                        dateField.value = '';  // Réinitialise la valeur à null (ce sera géré par Symfony)
                    } else {
                        dateFieldWrapper.style.display = 'block';
                    }
                }

                // Associer l'événement aux boutons radio
                document.querySelectorAll('input[name="sortie[inscriptionOption]"]').forEach((input) => {
                    input.addEventListener('change', toggleDateField);
                });

                toggleDateField();  // Initialiser l'affichage, masquant la date par défaut pour "Maintenant"
            });
        </script>


    {% endblock %}
